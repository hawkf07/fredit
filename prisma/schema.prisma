generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?      @unique
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Comment       Comment?     @relation(fields: [commentId], references: [id])
  commentId     String?
  postId        String?
  SubFreddit    SubFreddit[]
  Post          Post[]
  authorPost    Post?        @relation(name: "author")
  commentauthor Comment?     @relation("commentAuthor")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id          String  @id @default(cuid())
  commentText String
  body        String
  author      User    @relation("commentAuthor", fields: [authorName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  authorName  String  @unique
  Post        Post?   @relation(fields: [postId], references: [id])
  postId      String?
  User        User[]
}

model Post {
  id    String  @id @default(cuid())
  title String?

  description  String?
  votesCount   Int         @default(0)
  comments     Comment[]
  identifier   String      @unique @default(cuid())
  dateCreated  DateTime    @default(now())
  User         User[]
  postsId      String?
  author       User?       @relation("author", fields: [authorName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  authorName   String?     @unique
  SubFreddit   SubFreddit? @relation(fields: [subFredditId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subFredditId String?
}

model SubFreddit {
  id          String  @id @default(cuid())
  name        String  @unique
  title       String?
  posts       Post[]
  imageUrl    String?
  bannerUrl   String?
  creator     User    @relation(fields: [creatorName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  creatorName String

  @@index([name])
}
